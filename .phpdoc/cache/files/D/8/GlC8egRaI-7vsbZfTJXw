1702249037
waR3U4bTeM%3A8e4eeee0865b3cb3162ece4602a3d7c4-6ac469670bb3e2d67b5203c3bb0de0da
s:12948:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjZhYzQ2OTY3MGJiM2UyZDY3YjUyMDNjM2JiMGRlMGRhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTE6InJvdXRpbmcucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjA6InZlbmRvci9zeW1mb255L2ZyYW1ld29yay1idW5kbGUvUmVzb3VyY2VzL2NvbmZpZy9yb3V0aW5nLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6ODQ4OToiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3I7Cgp1c2UgUHNyXENvbnRhaW5lclxDb250YWluZXJJbnRlcmZhY2U7CnVzZSBTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcQ2FjaGVXYXJtZXJcUm91dGVyQ2FjaGVXYXJtZXI7CnVzZSBTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcQ29udHJvbGxlclxSZWRpcmVjdENvbnRyb2xsZXI7CnVzZSBTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcQ29udHJvbGxlclxUZW1wbGF0ZUNvbnRyb2xsZXI7CnVzZSBTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcUm91dGluZ1xBbm5vdGF0ZWRSb3V0ZUNvbnRyb2xsZXJMb2FkZXI7CnVzZSBTeW1mb255XEJ1bmRsZVxGcmFtZXdvcmtCdW5kbGVcUm91dGluZ1xEZWxlZ2F0aW5nTG9hZGVyOwp1c2UgU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXFJvdXRpbmdcUmVkaXJlY3RhYmxlQ29tcGlsZWRVcmxNYXRjaGVyOwp1c2UgU3ltZm9ueVxCdW5kbGVcRnJhbWV3b3JrQnVuZGxlXFJvdXRpbmdcUm91dGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcQ29uZmlnXExvYWRlclxMb2FkZXJSZXNvbHZlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBLZXJuZWxcRXZlbnRMaXN0ZW5lclxSb3V0ZXJMaXN0ZW5lcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFJvdXRpbmdcR2VuZXJhdG9yXENvbXBpbGVkVXJsR2VuZXJhdG9yOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xHZW5lcmF0b3JcRHVtcGVyXENvbXBpbGVkVXJsR2VuZXJhdG9yRHVtcGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xHZW5lcmF0b3JcVXJsR2VuZXJhdG9ySW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xMb2FkZXJcQW5ub3RhdGlvbkRpcmVjdG9yeUxvYWRlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFJvdXRpbmdcTG9hZGVyXEFubm90YXRpb25GaWxlTG9hZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xMb2FkZXJcQ29udGFpbmVyTG9hZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xMb2FkZXJcRGlyZWN0b3J5TG9hZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xMb2FkZXJcR2xvYkZpbGVMb2FkZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxSb3V0aW5nXExvYWRlclxQaHBGaWxlTG9hZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xMb2FkZXJcUHNyNERpcmVjdG9yeUxvYWRlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFJvdXRpbmdcTG9hZGVyXFhtbEZpbGVMb2FkZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxSb3V0aW5nXExvYWRlclxZYW1sRmlsZUxvYWRlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFJvdXRpbmdcTWF0Y2hlclxEdW1wZXJcQ29tcGlsZWRVcmxNYXRjaGVyRHVtcGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xNYXRjaGVyXEV4cHJlc3Npb25MYW5ndWFnZVByb3ZpZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xNYXRjaGVyXFVybE1hdGNoZXJJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxSb3V0aW5nXFJlcXVlc3RDb250ZXh0Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xSZXF1ZXN0Q29udGV4dEF3YXJlSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcUm91dGluZ1xSb3V0ZXJJbnRlcmZhY2U7CgpyZXR1cm4gc3RhdGljIGZ1bmN0aW9uIChDb250YWluZXJDb25maWd1cmF0b3IgJGNvbnRhaW5lcikgewogICAgJGNvbnRhaW5lci0+cGFyYW1ldGVycygpCiAgICAgICAgLT5zZXQoJ3JvdXRlci5yZXF1ZXN0X2NvbnRleHQuaG9zdCcsICdsb2NhbGhvc3QnKQogICAgICAgIC0+c2V0KCdyb3V0ZXIucmVxdWVzdF9jb250ZXh0LnNjaGVtZScsICdodHRwJykKICAgICAgICAtPnNldCgncm91dGVyLnJlcXVlc3RfY29udGV4dC5iYXNlX3VybCcsICcnKQogICAgOwoKICAgICRjb250YWluZXItPnNlcnZpY2VzKCkKICAgICAgICAtPnNldCgncm91dGluZy5yZXNvbHZlcicsIExvYWRlclJlc29sdmVyOjpjbGFzcykKCiAgICAgICAgLT5zZXQoJ3JvdXRpbmcubG9hZGVyLnhtbCcsIFhtbEZpbGVMb2FkZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnZmlsZV9sb2NhdG9yJyksCiAgICAgICAgICAgICAgICAnJWtlcm5lbC5lbnZpcm9ubWVudCUnLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygncm91dGluZy5sb2FkZXInKQoKICAgICAgICAtPnNldCgncm91dGluZy5sb2FkZXIueW1sJywgWWFtbEZpbGVMb2FkZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnZmlsZV9sb2NhdG9yJyksCiAgICAgICAgICAgICAgICAnJWtlcm5lbC5lbnZpcm9ubWVudCUnLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygncm91dGluZy5sb2FkZXInKQoKICAgICAgICAtPnNldCgncm91dGluZy5sb2FkZXIucGhwJywgUGhwRmlsZUxvYWRlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdmaWxlX2xvY2F0b3InKSwKICAgICAgICAgICAgICAgICcla2VybmVsLmVudmlyb25tZW50JScsCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdyb3V0aW5nLmxvYWRlcicpCgogICAgICAgIC0+c2V0KCdyb3V0aW5nLmxvYWRlci5nbG9iJywgR2xvYkZpbGVMb2FkZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnZmlsZV9sb2NhdG9yJyksCiAgICAgICAgICAgICAgICAnJWtlcm5lbC5lbnZpcm9ubWVudCUnLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygncm91dGluZy5sb2FkZXInKQoKICAgICAgICAtPnNldCgncm91dGluZy5sb2FkZXIuZGlyZWN0b3J5JywgRGlyZWN0b3J5TG9hZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2ZpbGVfbG9jYXRvcicpLAogICAgICAgICAgICAgICAgJyVrZXJuZWwuZW52aXJvbm1lbnQlJywKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ3JvdXRpbmcubG9hZGVyJykKCiAgICAgICAgLT5zZXQoJ3JvdXRpbmcubG9hZGVyLmNvbnRhaW5lcicsIENvbnRhaW5lckxvYWRlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICB0YWdnZWRfbG9jYXRvcigncm91dGluZy5yb3V0ZV9sb2FkZXInKSwKICAgICAgICAgICAgICAgICcla2VybmVsLmVudmlyb25tZW50JScsCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdyb3V0aW5nLmxvYWRlcicpCgogICAgICAgIC0+c2V0KCdyb3V0aW5nLmxvYWRlci5hbm5vdGF0aW9uJywgQW5ub3RhdGVkUm91dGVDb250cm9sbGVyTG9hZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2Fubm90YXRpb25fcmVhZGVyJyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgICcla2VybmVsLmVudmlyb25tZW50JScsCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdyb3V0aW5nLmxvYWRlcicsIFsncHJpb3JpdHknID0+IC0xMF0pCgogICAgICAgIC0+c2V0KCdyb3V0aW5nLmxvYWRlci5hbm5vdGF0aW9uLmRpcmVjdG9yeScsIEFubm90YXRpb25EaXJlY3RvcnlMb2FkZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnZmlsZV9sb2NhdG9yJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyb3V0aW5nLmxvYWRlci5hbm5vdGF0aW9uJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdyb3V0aW5nLmxvYWRlcicsIFsncHJpb3JpdHknID0+IC0xMF0pCgogICAgICAgIC0+c2V0KCdyb3V0aW5nLmxvYWRlci5hbm5vdGF0aW9uLmZpbGUnLCBBbm5vdGF0aW9uRmlsZUxvYWRlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdmaWxlX2xvY2F0b3InKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JvdXRpbmcubG9hZGVyLmFubm90YXRpb24nKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ3JvdXRpbmcubG9hZGVyJywgWydwcmlvcml0eScgPT4gLTEwXSkKCiAgICAgICAgLT5zZXQoJ3JvdXRpbmcubG9hZGVyLnBzcjQnLCBQc3I0RGlyZWN0b3J5TG9hZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2ZpbGVfbG9jYXRvcicpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygncm91dGluZy5sb2FkZXInLCBbJ3ByaW9yaXR5JyA9PiAtMTBdKQoKICAgICAgICAtPnNldCgncm91dGluZy5sb2FkZXInLCBEZWxlZ2F0aW5nTG9hZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5wdWJsaWMoKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgncm91dGluZy5yZXNvbHZlcicpLAogICAgICAgICAgICAgICAgW10sIC8vIERlZmF1bHQgb3B0aW9ucwogICAgICAgICAgICAgICAgW10sIC8vIERlZmF1bHQgcmVxdWlyZW1lbnRzCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdyb3V0ZXIuZGVmYXVsdCcsIFJvdXRlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKENvbnRhaW5lckludGVyZmFjZTo6Y2xhc3MpLAogICAgICAgICAgICAgICAgcGFyYW0oJ3JvdXRlci5yZXNvdXJjZScpLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICdjYWNoZV9kaXInID0+IHBhcmFtKCdyb3V0ZXIuY2FjaGVfZGlyJyksCiAgICAgICAgICAgICAgICAgICAgJ2RlYnVnJyA9PiBwYXJhbSgna2VybmVsLmRlYnVnJyksCiAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRvcl9jbGFzcycgPT4gQ29tcGlsZWRVcmxHZW5lcmF0b3I6OmNsYXNzLAogICAgICAgICAgICAgICAgICAgICdnZW5lcmF0b3JfZHVtcGVyX2NsYXNzJyA9PiBDb21waWxlZFVybEdlbmVyYXRvckR1bXBlcjo6Y2xhc3MsCiAgICAgICAgICAgICAgICAgICAgJ21hdGNoZXJfY2xhc3MnID0+IFJlZGlyZWN0YWJsZUNvbXBpbGVkVXJsTWF0Y2hlcjo6Y2xhc3MsCiAgICAgICAgICAgICAgICAgICAgJ21hdGNoZXJfZHVtcGVyX2NsYXNzJyA9PiBDb21waWxlZFVybE1hdGNoZXJEdW1wZXI6OmNsYXNzLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JvdXRlci5yZXF1ZXN0X2NvbnRleHQnKS0+aWdub3JlT25JbnZhbGlkKCksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdwYXJhbWV0ZXJfYmFnJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgc2VydmljZSgnbG9nZ2VyJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5kZWZhdWx0X2xvY2FsZScpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmNhbGwoJ3NldENvbmZpZ0NhY2hlRmFjdG9yeScsIFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2NvbmZpZ19jYWNoZV9mYWN0b3J5JyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdtb25vbG9nLmxvZ2dlcicsIFsnY2hhbm5lbCcgPT4gJ3JvdXRlciddKQogICAgICAgICAgICAtPnRhZygnY29udGFpbmVyLnNlcnZpY2Vfc3Vic2NyaWJlcicsIFsnaWQnID0+ICdyb3V0aW5nLmxvYWRlciddKQogICAgICAgIC0+YWxpYXMoJ3JvdXRlcicsICdyb3V0ZXIuZGVmYXVsdCcpCiAgICAgICAgICAgIC0+cHVibGljKCkKICAgICAgICAtPmFsaWFzKFJvdXRlckludGVyZmFjZTo6Y2xhc3MsICdyb3V0ZXInKQogICAgICAgIC0+YWxpYXMoVXJsR2VuZXJhdG9ySW50ZXJmYWNlOjpjbGFzcywgJ3JvdXRlcicpCiAgICAgICAgLT5hbGlhcyhVcmxNYXRjaGVySW50ZXJmYWNlOjpjbGFzcywgJ3JvdXRlcicpCiAgICAgICAgLT5hbGlhcyhSZXF1ZXN0Q29udGV4dEF3YXJlSW50ZXJmYWNlOjpjbGFzcywgJ3JvdXRlcicpCgogICAgICAgIC0+c2V0KCdyb3V0ZXIucmVxdWVzdF9jb250ZXh0JywgUmVxdWVzdENvbnRleHQ6OmNsYXNzKQogICAgICAgICAgICAtPmZhY3RvcnkoW1JlcXVlc3RDb250ZXh0OjpjbGFzcywgJ2Zyb21VcmknXSkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHBhcmFtKCdyb3V0ZXIucmVxdWVzdF9jb250ZXh0LmJhc2VfdXJsJyksCiAgICAgICAgICAgICAgICBwYXJhbSgncm91dGVyLnJlcXVlc3RfY29udGV4dC5ob3N0JyksCiAgICAgICAgICAgICAgICBwYXJhbSgncm91dGVyLnJlcXVlc3RfY29udGV4dC5zY2hlbWUnKSwKICAgICAgICAgICAgICAgIHBhcmFtKCdyZXF1ZXN0X2xpc3RlbmVyLmh0dHBfcG9ydCcpLAogICAgICAgICAgICAgICAgcGFyYW0oJ3JlcXVlc3RfbGlzdGVuZXIuaHR0cHNfcG9ydCcpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPmNhbGwoJ3NldFBhcmFtZXRlcicsIFsKICAgICAgICAgICAgICAgICdfZnVuY3Rpb25zJywKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JvdXRlci5leHByZXNzaW9uX2xhbmd1YWdlX3Byb3ZpZGVyJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICBdKQogICAgICAgIC0+YWxpYXMoUmVxdWVzdENvbnRleHQ6OmNsYXNzLCAncm91dGVyLnJlcXVlc3RfY29udGV4dCcpCgogICAgICAgIC0+c2V0KCdyb3V0ZXIuZXhwcmVzc2lvbl9sYW5ndWFnZV9wcm92aWRlcicsIEV4cHJlc3Npb25MYW5ndWFnZVByb3ZpZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHRhZ2dlZF9sb2NhdG9yKCdyb3V0aW5nLmV4cHJlc3Npb25fbGFuZ3VhZ2VfZnVuY3Rpb24nLCAnZnVuY3Rpb24nKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ3JvdXRpbmcuZXhwcmVzc2lvbl9sYW5ndWFnZV9wcm92aWRlcicpCgogICAgICAgIC0+c2V0KCdyb3V0ZXIuY2FjaGVfd2FybWVyJywgUm91dGVyQ2FjaGVXYXJtZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoW3NlcnZpY2UoQ29udGFpbmVySW50ZXJmYWNlOjpjbGFzcyldKQogICAgICAgICAgICAtPnRhZygnY29udGFpbmVyLnNlcnZpY2Vfc3Vic2NyaWJlcicsIFsnaWQnID0+ICdyb3V0ZXInXSkKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5jYWNoZV93YXJtZXInKQoKICAgICAgICAtPnNldCgncm91dGVyX2xpc3RlbmVyJywgUm91dGVyTGlzdGVuZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgncm91dGVyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyb3V0ZXIucmVxdWVzdF9jb250ZXh0JyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgc2VydmljZSgnbG9nZ2VyJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5wcm9qZWN0X2RpcicpLAogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5kZWJ1ZycpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygna2VybmVsLmV2ZW50X3N1YnNjcmliZXInKQogICAgICAgICAgICAtPnRhZygnbW9ub2xvZy5sb2dnZXInLCBbJ2NoYW5uZWwnID0+ICdyZXF1ZXN0J10pCgogICAgICAgIC0+c2V0KFJlZGlyZWN0Q29udHJvbGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+cHVibGljKCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JvdXRlcicpLAogICAgICAgICAgICAgICAgaW5saW5lX3NlcnZpY2UoJ2ludCcpCiAgICAgICAgICAgICAgICAgICAgLT5mYWN0b3J5KFtzZXJ2aWNlKCdyb3V0ZXIucmVxdWVzdF9jb250ZXh0JyksICdnZXRIdHRwUG9ydCddKSwKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKCdpbnQnKQogICAgICAgICAgICAgICAgICAgIC0+ZmFjdG9yeShbc2VydmljZSgncm91dGVyLnJlcXVlc3RfY29udGV4dCcpLCAnZ2V0SHR0cHNQb3J0J10pLAogICAgICAgICAgICBdKQoKICAgICAgICAtPnNldChUZW1wbGF0ZUNvbnRyb2xsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgndHdpZycpLT5pZ25vcmVPbkludmFsaWQoKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT5wdWJsaWMoKQogICAgOwp9OwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YToxOntzOjU4OiJcU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiQ29uZmlndXJhdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";