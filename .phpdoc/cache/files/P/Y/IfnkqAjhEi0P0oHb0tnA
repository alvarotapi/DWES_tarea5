1702249089
waR3U4bTeM%3A5de8b9f62402ea88afb20f05e46c4726-69355796958ff7a754e1aa84eb3101c8
s:27292:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY5MzU1Nzk2OTU4ZmY3YTc1NGUxYWE4NGViMzEwMWM4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTg6InNpbXBsZS1waHB1bml0LnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjUyOiJ2ZW5kb3Ivc3ltZm9ueS9waHB1bml0LWJyaWRnZS9iaW4vc2ltcGxlLXBocHVuaXQucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxODE2NzoiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCi8vIFBsZWFzZSB1cGRhdGUgd2hlbiBwaHB1bml0IG5lZWRzIHRvIGJlIHJlaW5zdGFsbGVkIHdpdGggZnJlc2ggZGVwczoKLy8gQ2FjaGUtSWQ6IDIwMjEtMDItMDQgMTE6MDAgVVRDCgppZiAoJ2NsaScgIT09IFxQSFBfU0FQSSAmJiAncGhwZGJnJyAhPT0gXFBIUF9TQVBJKSB7CiAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBmcm9tIHRoZSBjb21tYW5kIGxpbmUuJyk7Cn0KCmVycm9yX3JlcG9ydGluZygtMSk7CgpnbG9iYWwgJGFyZ3YsICRhcmdjOwokYXJndiA9ICRfU0VSVkVSWydhcmd2J10gPz8gW107CiRhcmdjID0gJF9TRVJWRVJbJ2FyZ2MnXSA/PyAwOwokZ2V0RW52VmFyID0gZnVuY3Rpb24gKCRuYW1lLCAkZGVmYXVsdCA9IGZhbHNlKSB1c2UgKCRhcmd2KSB7CiAgICBpZiAoZmFsc2UgIT09ICR2YWx1ZSA9IGdldGVudigkbmFtZSkpIHsKICAgICAgICByZXR1cm4gJHZhbHVlOwogICAgfQoKICAgIHN0YXRpYyAkcGhwdW5pdENvbmZpZyA9IG51bGw7CiAgICBpZiAobnVsbCA9PT0gJHBocHVuaXRDb25maWcpIHsKICAgICAgICAkcGhwdW5pdENvbmZpZ0ZpbGVuYW1lID0gbnVsbDsKICAgICAgICAkZ2V0UGhwVW5pdENvbmZpZyA9IGZ1bmN0aW9uICgkcHJvYmFibGVDb25maWcpIHVzZSAoJiRnZXRQaHBVbml0Q29uZmlnKSB7CiAgICAgICAgICAgIGlmICghJHByb2JhYmxlQ29uZmlnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaXNfZGlyKCRwcm9iYWJsZUNvbmZpZykpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkZ2V0UGhwVW5pdENvbmZpZygkcHJvYmFibGVDb25maWcuXERJUkVDVE9SWV9TRVBBUkFUT1IuJ3BocHVuaXQueG1sJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChmaWxlX2V4aXN0cygkcHJvYmFibGVDb25maWcpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHByb2JhYmxlQ29uZmlnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChmaWxlX2V4aXN0cygkcHJvYmFibGVDb25maWcuJy5kaXN0JykpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkcHJvYmFibGVDb25maWcuJy5kaXN0JzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfTsKCiAgICAgICAgZm9yZWFjaCAoJGFyZ3YgYXMgJGNsaUFyZ3VtZW50SW5kZXggPT4gJGNsaUFyZ3VtZW50KSB7CiAgICAgICAgICAgIGlmICgnLS0nID09PSAkY2xpQXJndW1lbnQpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxvbmcgb3B0aW9uCiAgICAgICAgICAgIGlmICgnLS1jb25maWd1cmF0aW9uJyA9PT0gJGNsaUFyZ3VtZW50ICYmIGFycmF5X2tleV9leGlzdHMoJGNsaUFyZ3VtZW50SW5kZXggKyAxLCAkYXJndikpIHsKICAgICAgICAgICAgICAgICRwaHB1bml0Q29uZmlnRmlsZW5hbWUgPSAkZ2V0UGhwVW5pdENvbmZpZygkYXJndlskY2xpQXJndW1lbnRJbmRleCArIDFdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHNob3J0IG9wdGlvbgogICAgICAgICAgICBpZiAoMCA9PT0gc3RycG9zKCRjbGlBcmd1bWVudCwgJy1jJykpIHsKICAgICAgICAgICAgICAgIGlmICgnLWMnID09PSAkY2xpQXJndW1lbnQgJiYgYXJyYXlfa2V5X2V4aXN0cygkY2xpQXJndW1lbnRJbmRleCArIDEsICRhcmd2KSkgewogICAgICAgICAgICAgICAgICAgICRwaHB1bml0Q29uZmlnRmlsZW5hbWUgPSAkZ2V0UGhwVW5pdENvbmZpZygkYXJndlskY2xpQXJndW1lbnRJbmRleCArIDFdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHBocHVuaXRDb25maWdGaWxlbmFtZSA9ICRnZXRQaHBVbml0Q29uZmlnKHN1YnN0cigkY2xpQXJndW1lbnQsIDIpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkcGhwdW5pdENvbmZpZ0ZpbGVuYW1lID0gJHBocHVuaXRDb25maWdGaWxlbmFtZSA/OiAkZ2V0UGhwVW5pdENvbmZpZygncGhwdW5pdC54bWwnKTsKCiAgICAgICAgaWYgKCRwaHB1bml0Q29uZmlnRmlsZW5hbWUpIHsKICAgICAgICAgICAgJHBocHVuaXRDb25maWcgPSBuZXcgRE9NRG9jdW1lbnQoKTsKICAgICAgICAgICAgJHBocHVuaXRDb25maWctPmxvYWQoJHBocHVuaXRDb25maWdGaWxlbmFtZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHBocHVuaXRDb25maWcgPSBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoZmFsc2UgIT09ICRwaHB1bml0Q29uZmlnKSB7CiAgICAgICAgJHZhciA9IG5ldyBET01YUGF0aCgkcGhwdW5pdENvbmZpZyk7CiAgICAgICAgZm9yZWFjaCAoJHZhci0+cXVlcnkoJy8vcGhwL3NlcnZlcltAbmFtZT0iJy4kbmFtZS4nIl0nKSBhcyAkdmFyKSB7CiAgICAgICAgICAgIHJldHVybiAkdmFyLT5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7CiAgICAgICAgfQogICAgICAgIGZvcmVhY2ggKCR2YXItPnF1ZXJ5KCcvL3BocC9lbnZbQG5hbWU9IicuJG5hbWUuJyJdJykgYXMgJHZhcikgewogICAgICAgICAgICByZXR1cm4gJHZhci0+Z2V0QXR0cmlidXRlKCd2YWx1ZScpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJGRlZmF1bHQ7Cn07CgokcGFzc3RocnVPckZhaWwgPSBmdW5jdGlvbiAoJGNvbW1hbmQpIHsKICAgIHBhc3N0aHJ1KCRjb21tYW5kLCAkc3RhdHVzKTsKCiAgICBpZiAoJHN0YXR1cykgewogICAgICAgIGV4aXQoJHN0YXR1cyk7CiAgICB9Cn07CgppZiAoXFBIUF9WRVJTSU9OX0lEID49IDgwMDAwKSB7CiAgICAvLyBQSFAgOCByZXF1aXJlcyBQSFBVbml0IDkuMyssIFBIUCA4LjEgcmVxdWlyZXMgUEhQVW5pdCA5LjUrCiAgICAkUEhQVU5JVF9WRVJTSU9OID0gJGdldEVudlZhcignU1lNRk9OWV9QSFBVTklUX1ZFUlNJT04nLCAnOS41JykgPzogJzkuNSc7Cn0gZWxzZWlmIChcUEhQX1ZFUlNJT05fSUQgPj0gNzAyMDApIHsKICAgIC8vIFBIUFVuaXQgOCByZXF1aXJlcyBQSFAgNy4yKwogICAgJFBIUFVOSVRfVkVSU0lPTiA9ICRnZXRFbnZWYXIoJ1NZTUZPTllfUEhQVU5JVF9WRVJTSU9OJywgJzguNScpID86ICc4LjUnOwp9IGVsc2UgewogICAgJFBIUFVOSVRfVkVSU0lPTiA9ICRnZXRFbnZWYXIoJ1NZTUZPTllfUEhQVU5JVF9WRVJTSU9OJywgJzcuNScpID86ICc3LjUnOwp9CgokTUFYX1BIUFVOSVRfVkVSU0lPTiA9ICRnZXRFbnZWYXIoJ1NZTUZPTllfTUFYX1BIUFVOSVRfVkVSU0lPTicsIGZhbHNlKTsKCmlmICgkTUFYX1BIUFVOSVRfVkVSU0lPTiAmJiB2ZXJzaW9uX2NvbXBhcmUoJE1BWF9QSFBVTklUX1ZFUlNJT04sICRQSFBVTklUX1ZFUlNJT04sICc8JykpIHsKICAgICRQSFBVTklUX1ZFUlNJT04gPSAkTUFYX1BIUFVOSVRfVkVSU0lPTjsKfQoKJFBIUFVOSVRfUkVNT1ZFX1JFVFVSTl9UWVBFSElOVCA9IGZpbHRlcl92YXIoJGdldEVudlZhcignU1lNRk9OWV9QSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlQnLCAnMCcpLCBcRklMVEVSX1ZBTElEQVRFX0JPT0xFQU4pOwoKJENPTVBPU0VSX0pTT04gPSBnZXRlbnYoJ0NPTVBPU0VSJykgPzogJ2NvbXBvc2VyLmpzb24nOwoKJHJvb3QgPSBfX0RJUl9fOwp3aGlsZSAoIWZpbGVfZXhpc3RzKCRyb290LicvJy4kQ09NUE9TRVJfSlNPTikgfHwgZmlsZV9leGlzdHMoJHJvb3QuJy9EZXByZWNhdGlvbkVycm9ySGFuZGxlci5waHAnKSkgewogICAgaWYgKCRyb290ID09PSBkaXJuYW1lKCRyb290KSkgewogICAgICAgIGJyZWFrOwogICAgfQogICAgJHJvb3QgPSBkaXJuYW1lKCRyb290KTsKfQoKJG9sZFB3ZCA9IGdldGN3ZCgpOwokUEhQVU5JVF9ESVIgPSBydHJpbSgkZ2V0RW52VmFyKCdTWU1GT05ZX1BIUFVOSVRfRElSJywgJHJvb3QuJy92ZW5kb3IvYmluLy5waHB1bml0JyksICcvJy5cRElSRUNUT1JZX1NFUEFSQVRPUik7CiRQSFAgPSBkZWZpbmVkKCdQSFBfQklOQVJZJykgPyBcUEhQX0JJTkFSWSA6ICdwaHAnOwokUEhQID0gZXNjYXBlc2hlbGxhcmcoJFBIUCk7CmlmICgncGhwZGJnJyA9PT0gXFBIUF9TQVBJKSB7CiAgICAkUEhQIC49ICcgLXFycic7Cn0KCiRkZWZhdWx0RW52cyA9IFsKICAgICdDT01QT1NFUicgPT4gJ2NvbXBvc2VyLmpzb24nLAogICAgJ0NPTVBPU0VSX1ZFTkRPUl9ESVInID0+ICd2ZW5kb3InLAogICAgJ0NPTVBPU0VSX0JJTl9ESVInID0+ICdiaW4nLAogICAgJ1NZTUZPTllfU0lNUExFX1BIUFVOSVRfQklOX0RJUicgPT4gX19ESVJfXywKXTsKCmZvcmVhY2ggKCRkZWZhdWx0RW52cyBhcyAkZW52TmFtZSA9PiAkZW52VmFsdWUpIHsKICAgIGlmICgkZW52VmFsdWUgIT09IGdldGVudigkZW52TmFtZSkpIHsKICAgICAgICBwdXRlbnYoIiRlbnZOYW1lPSRlbnZWYWx1ZSIpOwogICAgICAgICRfU0VSVkVSWyRlbnZOYW1lXSA9ICRfRU5WWyRlbnZOYW1lXSA9ICRlbnZWYWx1ZTsKICAgIH0KfQoKaWYgKCdkaXNhYmxlZCcgPT09ICRnZXRFbnZWYXIoJ1NZTUZPTllfREVQUkVDQVRJT05TX0hFTFBFUicpKSB7CiAgICBwdXRlbnYoJ1NZTUZPTllfREVQUkVDQVRJT05TX0hFTFBFUj1kaXNhYmxlZCcpOwp9CgokQ09NUE9TRVIgPSAoJENPTVBPU0VSID0gZ2V0ZW52KCdDT01QT1NFUl9CSU5BUlknKSkKICAgIHx8IGZpbGVfZXhpc3RzKCRDT01QT1NFUiA9ICRvbGRQd2QuJy9jb21wb3Nlci5waGFyJykKICAgIHx8ICgkQ09NUE9TRVIgPSBydHJpbSgoc3RyaW5nKSAoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyBwcmVnX3JlcGxhY2UoJy9bXHJcbl0uKi8nLCAnJywgc2hlbGxfZXhlYygnd2hlcmUuZXhlIGNvbXBvc2VyLnBoYXIgMj4gTlVMJykpIDogc2hlbGxfZXhlYygnd2hpY2ggY29tcG9zZXIucGhhciAyPiAvZGV2L251bGwnKSkpKQogICAgfHwgKCRDT01QT1NFUiA9IHJ0cmltKChzdHJpbmcpICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiA/IHByZWdfcmVwbGFjZSgnL1tcclxuXS4qLycsICcnLCBzaGVsbF9leGVjKCd3aGVyZS5leGUgY29tcG9zZXIgMj4gTlVMJykpIDogc2hlbGxfZXhlYygnd2hpY2ggY29tcG9zZXIgMj4gL2Rldi9udWxsJykpKSkKICAgIHx8IGZpbGVfZXhpc3RzKCRDT01QT1NFUiA9IHJ0cmltKChzdHJpbmcpICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiA/IHNoZWxsX2V4ZWMoJ2dpdCByZXYtcGFyc2UgLS1zaG93LXRvcGxldmVsIDI+IE5VTCcpIDogc2hlbGxfZXhlYygnZ2l0IHJldi1wYXJzZSAtLXNob3ctdG9wbGV2ZWwgMj4gL2Rldi9udWxsJykpKS5cRElSRUNUT1JZX1NFUEFSQVRPUi4nY29tcG9zZXIucGhhcicpCiAgICA/ICgnIyEvdXNyL2Jpbi9lbnYgcGhwJyA9PT0gZmlsZV9nZXRfY29udGVudHMoJENPTVBPU0VSLCBmYWxzZSwgbnVsbCwgMCwgMTgpID8gJFBIUCA6ICcnKS4nICcuZXNjYXBlc2hlbGxhcmcoJENPTVBPU0VSKSAvLyBkZXRlY3Qgc2hlbGwgd3JhcHBlcnMgYnkgbG9va2luZyBhdCB0aGUgc2hlYmFuZwogICAgOiAnY29tcG9zZXInOwoKJHByZXZDYWNoZURpciA9IGdldGVudignQ09NUE9TRVJfQ0FDSEVfRElSJyk7CmlmICgkcHJldkNhY2hlRGlyKSB7CiAgICBpZiAoZmFsc2UgPT09ICRhYnNvbHV0ZUNhY2hlRGlyID0gcmVhbHBhdGgoJHByZXZDYWNoZURpcikpIHsKICAgICAgICBAbWtkaXIoJHByZXZDYWNoZURpciwgMDc3NywgdHJ1ZSk7CiAgICAgICAgJGFic29sdXRlQ2FjaGVEaXIgPSByZWFscGF0aCgkcHJldkNhY2hlRGlyKTsKICAgIH0KICAgIGlmICgkYWJzb2x1dGVDYWNoZURpcikgewogICAgICAgIHB1dGVudigiQ09NUE9TRVJfQ0FDSEVfRElSPSRhYnNvbHV0ZUNhY2hlRGlyIik7CiAgICB9IGVsc2UgewogICAgICAgICRwcmV2Q2FjaGVEaXIgPSBmYWxzZTsKICAgIH0KfQokU1lNRk9OWV9QSFBVTklUX1JFTU9WRSA9ICRnZXRFbnZWYXIoJ1NZTUZPTllfUEhQVU5JVF9SRU1PVkUnLCAncGhwc3BlYy9wcm9waGVjeScuKCRQSFBVTklUX1ZFUlNJT04gPCA2LjAgPyAnIHN5bWZvbnkveWFtbCcgOiAnJykpOwokU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUgPSAkZ2V0RW52VmFyKCdTWU1GT05ZX1BIUFVOSVRfUkVRVUlSRScsICcnKTsKJGNvbmZpZ3VyYXRpb25IYXNoID0gbWQ1KGltcGxvZGUoXFBIUF9FT0wsIFttZDVfZmlsZShfX0ZJTEVfXyksICRTWU1GT05ZX1BIUFVOSVRfUkVNT1ZFLCAkU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUsIChpbnQpICRQSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlRdKSk7CiRQSFBVTklUX1ZFUlNJT05fRElSID0gc3ByaW50ZigncGhwdW5pdC0lcy0lZCcsICRQSFBVTklUX1ZFUlNJT04sICRQSFBVTklUX1JFTU9WRV9SRVRVUk5fVFlQRUhJTlQpOwppZiAoIWZpbGVfZXhpc3RzKCIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIvcGhwdW5pdCIpIHx8ICRjb25maWd1cmF0aW9uSGFzaCAhPT0gQGZpbGVfZ2V0X2NvbnRlbnRzKCIkUEhQVU5JVF9ESVIvLiRQSFBVTklUX1ZFUlNJT05fRElSLm1kNSIpKSB7CiAgICAvLyBCdWlsZCBhIHN0YW5kYWxvbmUgcGhwdW5pdCB3aXRob3V0IHN5bWZvbnkveWFtbCBub3IgcHJvcGhlY3kgYnkgZGVmYXVsdAoKICAgIEBta2RpcigkUEhQVU5JVF9ESVIsIDA3NzcsIHRydWUpOwogICAgY2hkaXIoJFBIUFVOSVRfRElSKTsKICAgIGlmIChmaWxlX2V4aXN0cygiJFBIUFVOSVRfVkVSU0lPTl9ESVIiKSkgewogICAgICAgIHBhc3N0aHJ1KHNwcmludGYoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyAncm1kaXIgL1MgL1EgJXMgMj4gTlVMJyA6ICdybSAtcmYgJXMnLCBlc2NhcGVzaGVsbGFyZygiJFBIUFVOSVRfVkVSU0lPTl9ESVIub2xkIikpKTsKICAgICAgICByZW5hbWUoIiRQSFBVTklUX1ZFUlNJT05fRElSIiwgIiRQSFBVTklUX1ZFUlNJT05fRElSLm9sZCIpOwogICAgICAgIHBhc3N0aHJ1KHNwcmludGYoJ1xcJyA9PT0gXERJUkVDVE9SWV9TRVBBUkFUT1IgPyAncm1kaXIgL1MgL1EgJXMnIDogJ3JtIC1yZiAlcycsIGVzY2FwZXNoZWxsYXJnKCIkUEhQVU5JVF9WRVJTSU9OX0RJUi5vbGQiKSkpOwogICAgfQoKICAgICRpbmZvID0gW107CiAgICBmb3JlYWNoIChleHBsb2RlKCJcbiIsIGAkQ09NUE9TRVIgaW5mbyAtLW5vLWFuc2kgLWEgLW4gcGhwdW5pdC9waHB1bml0ICIkUEhQVU5JVF9WRVJTSU9OLioiYCkgYXMgJGxpbmUpIHsKICAgICAgICAkbGluZSA9IHJ0cmltKCRsaW5lKTsKCiAgICAgICAgaWYgKCEkaW5mbyAmJiBwcmVnX21hdGNoKCcvXnZlcnNpb25zICs6IC8nLCAkbGluZSkpIHsKICAgICAgICAgICAgJGluZm9bJ3ZlcnNpb25zJ10gPSBleHBsb2RlKCcsICcsIGx0cmltKHN1YnN0cigkbGluZSwgOSksICc6ICcpKTsKICAgICAgICB9IGVsc2VpZiAoaXNzZXQoJGluZm9bJ3JlcXVpcmVzJ10pKSB7CiAgICAgICAgICAgIGlmICgnJyA9PT0gJGxpbmUpIHsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbGluZSA9IGV4cGxvZGUoJyAnLCAkbGluZSwgMik7CiAgICAgICAgICAgICRpbmZvWydyZXF1aXJlcyddWyRsaW5lWzBdXSA9ICRsaW5lWzFdOwogICAgICAgIH0gZWxzZWlmICgkaW5mbyAmJiAncmVxdWlyZXMnID09PSAkbGluZSkgewogICAgICAgICAgICAkaW5mb1sncmVxdWlyZXMnXSA9IFtdOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoaW5fYXJyYXkoJy0tY29sb3JzPW5ldmVyJywgJGFyZ3YsIHRydWUpIHx8IChpc3NldCgkYXJndlskaSA9IGFycmF5X3NlYXJjaCgnbmV2ZXInLCAkYXJndiwgdHJ1ZSkgLSAxXSkgJiYgJy0tY29sb3JzJyA9PT0gJGFyZ3ZbJGldKSkgewogICAgICAgICRDT01QT1NFUiAuPSAnIC0tbm8tYW5zaSc7CiAgICB9IGVsc2UgewogICAgICAgICRDT01QT1NFUiAuPSAnIC0tYW5zaSc7CiAgICB9CgogICAgJGluZm8gKz0gWwogICAgICAgICd2ZXJzaW9ucycgPT4gW10sCiAgICAgICAgJ3JlcXVpcmVzJyA9PiBbJ3BocCcgPT4gJyonXSwKICAgIF07CgogICAgJHN0YWJsZVZlcnNpb25zID0gYXJyYXlfZmlsdGVyKCRpbmZvWyd2ZXJzaW9ucyddLCBmdW5jdGlvbiAoJHYpIHsKICAgICAgICByZXR1cm4gIXByZWdfbWF0Y2goJy8tZGV2JHxeZGV2LS8nLCAkdik7CiAgICB9KTsKCiAgICBpZiAoISRzdGFibGVWZXJzaW9ucykgewogICAgICAgICRwYXNzdGhydU9yRmFpbCgiJENPTVBPU0VSIGNyZWF0ZS1wcm9qZWN0IC0taWdub3JlLXBsYXRmb3JtLXJlcXMgLS1uby1pbnN0YWxsIC0tcHJlZmVyLWRpc3QgLS1uby1zY3JpcHRzIC0tbm8tcGx1Z2lucyAtLW5vLXByb2dyZXNzIC1zIGRldiBwaHB1bml0L3BocHVuaXQgJFBIUFVOSVRfVkVSU0lPTl9ESVIgXCIkUEhQVU5JVF9WRVJTSU9OLipcIiIpOwogICAgfSBlbHNlIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjcmVhdGUtcHJvamVjdCAtLWlnbm9yZS1wbGF0Zm9ybS1yZXFzIC0tbm8taW5zdGFsbCAtLXByZWZlci1kaXN0IC0tbm8tc2NyaXB0cyAtLW5vLXBsdWdpbnMgLS1uby1wcm9ncmVzcyBwaHB1bml0L3BocHVuaXQgJFBIUFVOSVRfVkVSU0lPTl9ESVIgXCIkUEhQVU5JVF9WRVJTSU9OLipcIiIpOwogICAgfQoKICAgIEBjb3B5KCIkUEhQVU5JVF9WRVJTSU9OX0RJUi9waHB1bml0LnhzZCIsICdwaHB1bml0LnhzZCcpOwogICAgY2hkaXIoIiRQSFBVTklUX1ZFUlNJT05fRElSIik7CiAgICBpZiAoJFNZTUZPTllfUEhQVU5JVF9SRU1PVkUpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZW1vdmUgLS1uby11cGRhdGUgLS1uby1pbnRlcmFjdGlvbiAiLiRTWU1GT05ZX1BIUFVOSVRfUkVNT1ZFKTsKICAgIH0KICAgIGlmICgkU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZXF1aXJlIC0tbm8tdXBkYXRlIC0tbm8taW50ZXJhY3Rpb24gIi4kU1lNRk9OWV9QSFBVTklUX1JFUVVJUkUpOwogICAgfQogICAgaWYgKDUuMSA8PSAkUEhQVU5JVF9WRVJTSU9OICYmICRQSFBVTklUX1ZFUlNJT04gPCA1LjQpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiByZXF1aXJlIC0tbm8tdXBkYXRlIHBocHVuaXQvcGhwdW5pdC1tb2NrLW9iamVjdHMgXCJ+My4xLjBcIiIpOwogICAgfQoKICAgIGlmIChwcmVnX21hdGNoKCd7XF4oKFxkKytcLilcZCsrKVtcZFwuXSokfScsICRpbmZvWydyZXF1aXJlcyddWydwaHAnXSwgJHBocFZlcnNpb24pICYmIHZlcnNpb25fY29tcGFyZSgkcGhwVmVyc2lvblsyXS4nOTknLCBcUEhQX1ZFUlNJT04sICc8JykpIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjb25maWcgcGxhdGZvcm0ucGhwIFwiJHBocFZlcnNpb25bMV0uOTlcIiIpOwogICAgfSBlbHNlIHsKICAgICAgICAkcGFzc3RocnVPckZhaWwoIiRDT01QT1NFUiBjb25maWcgLS11bnNldCBwbGF0Zm9ybS5waHAiKTsKICAgIH0KICAgIGlmIChmaWxlX2V4aXN0cygkcGF0aCA9ICRyb290LicvdmVuZG9yL3N5bWZvbnkvcGhwdW5pdC1icmlkZ2UnKSkgewogICAgICAgICRoYXlzdGFjayA9ICIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIiOwogICAgICAgICRyb290TGVuID0gc3RybGVuKCRyb290KTsKCiAgICAgICAgJHAgPSAoJHJvb3RMZW4gPD0gc3RybGVuKCRoYXlzdGFjaykgPyBzdHJfcmVwZWF0KCcuLi8nLCBzdWJzdHJfY291bnQoJGhheXN0YWNrLCAnLycsICRyb290TGVuKSkgOiAnJykuJ3ZlbmRvci9zeW1mb255L3BocHVuaXQtYnJpZGdlJzsKICAgICAgICBpZiAocmVhbHBhdGgoJHApID09PSByZWFscGF0aCgkcGF0aCkpIHsKICAgICAgICAgICAgJHBhdGggPSAkcDsKICAgICAgICB9CiAgICAgICAgJHBhc3N0aHJ1T3JGYWlsKCIkQ09NUE9TRVIgcmVxdWlyZSAtLW5vLXVwZGF0ZSBzeW1mb255L3BocHVuaXQtYnJpZGdlIFwiKkBkZXZcIiIpOwogICAgICAgICRwYXNzdGhydU9yRmFpbCgiJENPTVBPU0VSIGNvbmZpZyByZXBvc2l0b3JpZXMucGhwdW5pdC1icmlkZ2UgcGF0aCAiLmVzY2FwZXNoZWxsYXJnKHN0cl9yZXBsYWNlKCcvJywgXERJUkVDVE9SWV9TRVBBUkFUT1IsICRwYXRoKSkpOwogICAgICAgIGlmICgnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUikgewogICAgICAgICAgICBmaWxlX3B1dF9jb250ZW50cygnY29tcG9zZXIuanNvbicsIHByZWdfcmVwbGFjZSgnL14oIHs4fSkicGhwdW5pdC1icmlkZ2UiOiBceyQvbScsICIkMFxuJDEgICAgIi4nIm9wdGlvbnMiOiB7InN5bWxpbmsiOiBmYWxzZX0sJywgZmlsZV9nZXRfY29udGVudHMoJ2NvbXBvc2VyLmpzb24nKSkpOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgJHBhc3N0aHJ1T3JGYWlsKCIkQ09NUE9TRVIgcmVxdWlyZSAtLW5vLXVwZGF0ZSBzeW1mb255L3BocHVuaXQtYnJpZGdlIFwiKlwiIik7CiAgICB9CiAgICAkcHJldlJvb3QgPSBnZXRlbnYoJ0NPTVBPU0VSX1JPT1RfVkVSU0lPTicpOwogICAgcHV0ZW52KCJDT01QT1NFUl9ST09UX1ZFUlNJT049JFBIUFVOSVRfVkVSU0lPTi45OSIpOwogICAgJHEgPSAnXFwnID09PSBcRElSRUNUT1JZX1NFUEFSQVRPUiAmJiBcUEhQX1ZFUlNJT05fSUQgPCA4MDAwMCA/ICciJyA6ICcnOwogICAgLy8gLS1uby1zdWdnZXN0IGlzIG5vdCBpbiB0aGUgbGlzdCB0byBrZWVwIGNvbXBhdCB3aXRoIGNvbXBvc2VyIDEuMCwgd2hpY2ggaXMgc2hpcHBlZCB3aXRoIFVidW50dSAxNi4wNExUUwogICAgJGV4aXQgPSBwcm9jX2Nsb3NlKHByb2Nfb3BlbigiJHEkQ09NUE9TRVIgaW5zdGFsbCAtLW5vLWRldiAtLXByZWZlci1kaXN0IC0tbm8tcHJvZ3Jlc3MgJHEiLCBbXSwgJHAsIGdldGN3ZCgpKSk7CiAgICBwdXRlbnYoJ0NPTVBPU0VSX1JPT1RfVkVSU0lPTicuKGZhbHNlICE9PSAkcHJldlJvb3QgPyAnPScuJHByZXZSb290IDogJycpKTsKICAgIGlmICgkcHJldkNhY2hlRGlyKSB7CiAgICAgICAgcHV0ZW52KCJDT01QT1NFUl9DQUNIRV9ESVI9JHByZXZDYWNoZURpciIpOwogICAgfQogICAgaWYgKCRleGl0KSB7CiAgICAgICAgZXhpdCgkZXhpdCk7CiAgICB9CgogICAgLy8gTXV0YXRlIFRlc3RDYXNlIGNvZGUKICAgICRhbHRlcmVkQ29kZSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRhbHRlcmVkRmlsZSA9ICcuL3NyYy9GcmFtZXdvcmsvVGVzdENhc2UucGhwJyk7CiAgICBpZiAoJFBIUFVOSVRfUkVNT1ZFX1JFVFVSTl9UWVBFSElOVCkgewogICAgICAgICRhbHRlcmVkQ29kZSA9IHByZWdfcmVwbGFjZSgnL14gICAgKCg/OnByb3RlY3RlZHxwdWJsaWMpKD86IHN0YXRpYyk/IGZ1bmN0aW9uIFx3K1woXCkpOiB2b2lkL20nLCAnICAgICQxJywgJGFsdGVyZWRDb2RlKTsKICAgIH0KICAgICRhbHRlcmVkQ29kZSA9IHByZWdfcmVwbGFjZSgnL2Fic3RyYWN0IGNsYXNzIFRlc3RDYXNlW15ce10rXHsvJywgJyQwICcuXFBIUF9FT0wuIiAgICB1c2UgXFN5bWZvbnlcQnJpZGdlXFBocFVuaXRcTGVnYWN5XFBvbHlmaWxsVGVzdENhc2VUcmFpdDsiLCAkYWx0ZXJlZENvZGUsIDEpOwogICAgZmlsZV9wdXRfY29udGVudHMoJGFsdGVyZWRGaWxlLCAkYWx0ZXJlZENvZGUpOwoKICAgIC8vIE11dGF0ZSBBc3NlcnQgY29kZQogICAgJGFsdGVyZWRDb2RlID0gZmlsZV9nZXRfY29udGVudHMoJGFsdGVyZWRGaWxlID0gJy4vc3JjL0ZyYW1ld29yay9Bc3NlcnQucGhwJyk7CiAgICAkYWx0ZXJlZENvZGUgPSBwcmVnX3JlcGxhY2UoJy9hYnN0cmFjdCBjbGFzcyBBc3NlcnRbXlx7XStcey8nLCAnJDAgJy5cUEhQX0VPTC4iICAgIHVzZSBcU3ltZm9ueVxCcmlkZ2VcUGhwVW5pdFxMZWdhY3lcUG9seWZpbGxBc3NlcnRUcmFpdDsiLCAkYWx0ZXJlZENvZGUsIDEpOwogICAgZmlsZV9wdXRfY29udGVudHMoJGFsdGVyZWRGaWxlLCAkYWx0ZXJlZENvZGUpOwoKICAgIGZpbGVfcHV0X2NvbnRlbnRzKCdwaHB1bml0JywgPDw8J0VPUEhQJwo8P3BocAoKZGVmaW5lKCdQSFBVTklUX0NPTVBPU0VSX0lOU1RBTEwnLCBfX0RJUl9fLicvdmVuZG9yL2F1dG9sb2FkLnBocCcpOwpyZXF1aXJlIFBIUFVOSVRfQ09NUE9TRVJfSU5TVEFMTDsKCmlmICghY2xhc3NfZXhpc3RzKFxTeW1mb255RXhjbHVkZUxpc3RQaHB1bml0OjpjbGFzcywgZmFsc2UpKSB7CiAgICBjbGFzcyBTeW1mb255RXhjbHVkZUxpc3RQaHB1bml0IHt9Cn0KaWYgKG1ldGhvZF9leGlzdHMoXFBIUFVuaXRcVXRpbFxFeGNsdWRlTGlzdDo6Y2xhc3MsICdhZGREaXJlY3RvcnknKSkgewogICAgKG5ldyBQSFBVbml0XFV0aWxcRXhjbHVkZWxpc3QoKSktPmdldEV4Y2x1ZGVkRGlyZWN0b3JpZXMoKTsKICAgIFBIUFVuaXRcVXRpbFxFeGNsdWRlTGlzdDo6YWRkRGlyZWN0b3J5KFxkaXJuYW1lKChuZXcgXFJlZmxlY3Rpb25DbGFzcyhcU3ltZm9ueUV4Y2x1ZGVMaXN0UGhwdW5pdDo6Y2xhc3MpKS0+Z2V0RmlsZU5hbWUoKSkpOwogICAgY2xhc3NfZXhpc3RzKFxTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0OjpjbGFzcywgZmFsc2UpICYmIFBIUFVuaXRcVXRpbFxFeGNsdWRlTGlzdDo6YWRkRGlyZWN0b3J5KFxkaXJuYW1lKChuZXcgXFJlZmxlY3Rpb25DbGFzcyhcU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdDo6Y2xhc3MpKS0+Z2V0RmlsZU5hbWUoKSkpOwp9IGVsc2VpZiAobWV0aG9kX2V4aXN0cyhcUEhQVW5pdFxVdGlsXEJsYWNrbGlzdDo6Y2xhc3MsICdhZGREaXJlY3RvcnknKSkgewogICAgKG5ldyBQSFBVbml0XFV0aWxcQmxhY2tMaXN0KCkpLT5nZXRCbGFja2xpc3RlZERpcmVjdG9yaWVzKCk7CiAgICBQSFBVbml0XFV0aWxcQmxhY2tsaXN0OjphZGREaXJlY3RvcnkoXGRpcm5hbWUoKG5ldyBcUmVmbGVjdGlvbkNsYXNzKFxTeW1mb255RXhjbHVkZUxpc3RQaHB1bml0OjpjbGFzcykpLT5nZXRGaWxlTmFtZSgpKSk7CiAgICBjbGFzc19leGlzdHMoXFN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQ6OmNsYXNzLCBmYWxzZSkgJiYgUEhQVW5pdFxVdGlsXEJsYWNrbGlzdDo6YWRkRGlyZWN0b3J5KFxkaXJuYW1lKChuZXcgXFJlZmxlY3Rpb25DbGFzcyhcU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdDo6Y2xhc3MpKS0+Z2V0RmlsZU5hbWUoKSkpOwp9IGVsc2UgewogICAgUEhQVW5pdFxVdGlsXEJsYWNrbGlzdDo6JGJsYWNrbGlzdGVkQ2xhc3NOYW1lc1snU3ltZm9ueUV4Y2x1ZGVMaXN0UGhwdW5pdCddID0gMTsKICAgIFBIUFVuaXRcVXRpbFxCbGFja2xpc3Q6OiRibGFja2xpc3RlZENsYXNzTmFtZXNbJ1N5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQnXSA9IDE7Cn0KClN5bWZvbnlcQnJpZGdlXFBocFVuaXRcVGV4dFVJXENvbW1hbmQ6Om1haW4oKTsKCkVPUEhQCiAgICApOwogICAgY2hkaXIoJy4uJyk7CiAgICBmaWxlX3B1dF9jb250ZW50cygiLiRQSFBVTklUX1ZFUlNJT05fRElSLm1kNSIsICRjb25maWd1cmF0aW9uSGFzaCk7CiAgICBjaGRpcigkb2xkUHdkKTsKfQoKLy8gQ3JlYXRlIGEgc3ltbGluayB3aXRoIGEgcHJlZGljdGFibGUgcGF0aCBwb2ludGluZyB0byB0aGUgY3VycmVudGx5IHVzZWQgdmVyc2lvbi4KLy8gVGhpcyBpcyB1c2VmdWwgZm9yIHN0YXRpYyBhbmFseXRpY3MgdG9vbHMgc3VjaCBhcyBQSFBTdGFuIGhhdmluZyB0byBsb2FkIFBIUFVuaXQncyBjbGFzc2VzCi8vIGFuZCBmb3Igb3RoZXIgdGVzdGluZyBsaWJyYXJpZXMgc3VjaCBhcyBCZWhhdCB1c2luZyBQSFBVbml0J3MgYXNzZXJ0aW9ucy4KY2hkaXIoJFBIUFVOSVRfRElSKTsKaWYgKCdcXCcgPT09IFxESVJFQ1RPUllfU0VQQVJBVE9SKSB7CiAgICBwYXNzdGhydSgncm1kaXIgL1MgL1EgcGhwdW5pdCAyPiBOVUwnKTsKICAgIHBhc3N0aHJ1KHNwcmludGYoJ21rbGluayAvaiBwaHB1bml0ICVzID4gTlVMIDI+JjEnLCBlc2NhcGVzaGVsbGFyZygkUEhQVU5JVF9WRVJTSU9OX0RJUikpKTsKfSBlbHNlIHsKICAgIGlmIChmaWxlX2V4aXN0cygncGhwdW5pdCcpKSB7CiAgICAgICAgQHVubGluaygncGhwdW5pdCcpOwogICAgfQogICAgQHN5bWxpbmsoJFBIUFVOSVRfVkVSU0lPTl9ESVIsICdwaHB1bml0Jyk7Cn0KY2hkaXIoJG9sZFB3ZCk7CgppZiAoJFBIUFVOSVRfVkVSU0lPTiA8IDguMCkgewogICAgJGFyZ3YgPSBhcnJheV9maWx0ZXIoJGFyZ3YsIGZ1bmN0aW9uICgkdikgdXNlICgmJGFyZ2MpIHsKICAgICAgICBpZiAoJy0tZG8tbm90LWNhY2hlLXJlc3VsdCcgIT09ICR2KSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICAtLSRhcmdjOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9KTsKfSBlbHNlaWYgKGZpbHRlcl92YXIoZ2V0ZW52KCdTWU1GT05ZX1BIUFVOSVRfRElTQUJMRV9SRVNVTFRfQ0FDSEUnKSwgXEZJTFRFUl9WQUxJREFURV9CT09MRUFOKSkgewogICAgJGFyZ3ZbXSA9ICctLWRvLW5vdC1jYWNoZS1yZXN1bHQnOwogICAgKyskYXJnYzsKfQoKJGNvbXBvbmVudHMgPSBbXTsKJGNtZCA9IGFycmF5X21hcCgnZXNjYXBlc2hlbGxhcmcnLCAkYXJndik7CiRleGl0ID0gMDsKCmlmIChpc3NldCgkYXJndlsxXSkgJiYgJ3N5bWZvbnknID09PSAkYXJndlsxXSAmJiAhZmlsZV9leGlzdHMoJ3N5bWZvbnknKSAmJiBmaWxlX2V4aXN0cygnc3JjL1N5bWZvbnknKSkgewogICAgJGFyZ3ZbMV0gPSAnc3JjL1N5bWZvbnknOwp9CmlmIChpc3NldCgkYXJndlsxXSkgJiYgaXNfZGlyKCRhcmd2WzFdKSAmJiAhZmlsZV9leGlzdHMoJGFyZ3ZbMV0uJy9waHB1bml0LnhtbC5kaXN0JykpIHsKICAgIC8vIEZpbmQgU3ltZm9ueSBjb21wb25lbnRzIGluIHBsYWluIHBocCBmb3IgV2luZG93cyBwb3J0YWJpbGl0eQoKICAgICRmaW5kZXIgPSBuZXcgUmVjdXJzaXZlRGlyZWN0b3J5SXRlcmF0b3IoJGFyZ3ZbMV0sIEZpbGVzeXN0ZW1JdGVyYXRvcjo6S0VZX0FTX0ZJTEVOQU1FIHwgRmlsZXN5c3RlbUl0ZXJhdG9yOjpVTklYX1BBVEhTKTsKICAgICRmaW5kZXIgPSBuZXcgUmVjdXJzaXZlSXRlcmF0b3JJdGVyYXRvcigkZmluZGVyKTsKICAgICRmaW5kZXItPnNldE1heERlcHRoKGdldGVudignU1lNRk9OWV9QSFBVTklUX01BWF9ERVBUSCcpID86IDMpOwoKICAgIGZvcmVhY2ggKCRmaW5kZXIgYXMgJGZpbGUgPT4gJGZpbGVJbmZvKSB7CiAgICAgICAgaWYgKCdwaHB1bml0LnhtbC5kaXN0JyA9PT0gJGZpbGUpIHsKICAgICAgICAgICAgJGNvbXBvbmVudHNbXSA9IGRpcm5hbWUoJGZpbGVJbmZvLT5nZXRQYXRobmFtZSgpKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoJGNvbXBvbmVudHMpIHsKICAgICAgICBhcnJheV9zaGlmdCgkY21kKTsKICAgIH0KfQoKJGNtZFswXSA9IHNwcmludGYoJyVzICVzIC0tY29sb3JzPWFsd2F5cycsICRQSFAsIGVzY2FwZXNoZWxsYXJnKCIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIvcGhwdW5pdCIpKTsKJGNtZCA9IHN0cl9yZXBsYWNlKCclJywgJyUlJywgaW1wbG9kZSgnICcsICRjbWQpKS4nICUxJHMnOwoKaWYgKCdcXCcgPT09IFxESVJFQ1RPUllfU0VQQVJBVE9SKSB7CiAgICAkY21kID0gJ2NtZCAvdjpvbiAvZCAvYyAiKCcuJGNtZC4nKSUyJHMiJzsKfSBlbHNlIHsKICAgICRjbWQgLj0gJyUyJHMnOwp9CgppZiAoJGNvbXBvbmVudHMpIHsKICAgICRza2lwcGVkVGVzdHMgPSAkX1NFUlZFUlsnU1lNRk9OWV9QSFBVTklUX1NLSVBQRURfVEVTVFMnXSA/PyBmYWxzZTsKICAgICRydW5uaW5nUHJvY3MgPSBbXTsKCiAgICBmb3JlYWNoICgkY29tcG9uZW50cyBhcyAkY29tcG9uZW50KSB7CiAgICAgICAgLy8gUnVuIHBocHVuaXQgdGVzdHMgaW4gcGFyYWxsZWwKCiAgICAgICAgaWYgKCRza2lwcGVkVGVzdHMpIHsKICAgICAgICAgICAgcHV0ZW52KCJTWU1GT05ZX1BIUFVOSVRfU0tJUFBFRF9URVNUUz0kY29tcG9uZW50LyRza2lwcGVkVGVzdHMiKTsKICAgICAgICB9CgogICAgICAgICRjID0gZXNjYXBlc2hlbGxhcmcoJGNvbXBvbmVudCk7CgogICAgICAgIGlmICgkcHJvYyA9IHByb2Nfb3BlbihzcHJpbnRmKCRjbWQsICRjLCAiID4gJGMvcGhwdW5pdC5zdGRvdXQgMj4gJGMvcGhwdW5pdC5zdGRlcnIiKSwgW10sICRwaXBlcykpIHsKICAgICAgICAgICAgJHJ1bm5pbmdQcm9jc1skY29tcG9uZW50XSA9ICRwcm9jOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRleGl0ID0gMTsKICAgICAgICAgICAgZWNobyAiXDAzM1s0MW1LT1wwMzNbMG0gJGNvbXBvbmVudFxuXG4iOwogICAgICAgIH0KICAgIH0KCiAgICB3aGlsZSAoJHJ1bm5pbmdQcm9jcykgewogICAgICAgIHVzbGVlcCgzMDAwMDApOwogICAgICAgICR0ZXJtaW5hdGVkUHJvY3MgPSBbXTsKICAgICAgICBmb3JlYWNoICgkcnVubmluZ1Byb2NzIGFzICRjb21wb25lbnQgPT4gJHByb2MpIHsKICAgICAgICAgICAgJHByb2NTdGF0dXMgPSBwcm9jX2dldF9zdGF0dXMoJHByb2MpOwogICAgICAgICAgICBpZiAoISRwcm9jU3RhdHVzWydydW5uaW5nJ10pIHsKICAgICAgICAgICAgICAgICR0ZXJtaW5hdGVkUHJvY3NbJGNvbXBvbmVudF0gPSAkcHJvY1N0YXR1c1snZXhpdGNvZGUnXTsKICAgICAgICAgICAgICAgIHVuc2V0KCRydW5uaW5nUHJvY3NbJGNvbXBvbmVudF0pOwogICAgICAgICAgICAgICAgcHJvY19jbG9zZSgkcHJvYyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZvcmVhY2ggKCR0ZXJtaW5hdGVkUHJvY3MgYXMgJGNvbXBvbmVudCA9PiAkcHJvY1N0YXR1cykgewogICAgICAgICAgICBmb3JlYWNoIChbJ291dCcsICdlcnInXSBhcyAkZmlsZSkgewogICAgICAgICAgICAgICAgJGZpbGUgPSAiJGNvbXBvbmVudC9waHB1bml0LnN0ZCRmaWxlIjsKICAgICAgICAgICAgICAgIHJlYWRmaWxlKCRmaWxlKTsKICAgICAgICAgICAgICAgIHVubGluaygkZmlsZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZhaWwgb24gYW55IGluZGl2aWR1YWwgY29tcG9uZW50IGZhaWx1cmVzIGJ1dCBpZ25vcmUgc29tZSBlcnJvciBjb2RlcyBvbiBXaW5kb3dzIHdoZW4gQVBDdSBpcyBlbmFibGVkOgogICAgICAgICAgICAvLyBTVEFUVVNfU1RBQ0tfQlVGRkVSX09WRVJSVU4gKC0xMDczNzQwNzkxLzB4QzAwMDA0MDkpCiAgICAgICAgICAgIC8vIFNUQVRVU19BQ0NFU1NfVklPTEFUSU9OICgtMTA3Mzc0MTgxOS8weEMwMDAwMDA1KQogICAgICAgICAgICAvLyBTVEFUVVNfSEVBUF9DT1JSVVBUSU9OICgtMTA3Mzc0MDk0MC8weEMwMDAwMzc0KQogICAgICAgICAgICBpZiAoJHByb2NTdGF0dXMgJiYgKCdcXCcgIT09IFxESVJFQ1RPUllfU0VQQVJBVE9SIHx8ICFleHRlbnNpb25fbG9hZGVkKCdhcGN1JykgfHwgIWZpbHRlcl92YXIoaW5pX2dldCgnYXBjLmVuYWJsZV9jbGknKSwgXEZJTFRFUl9WQUxJREFURV9CT09MRUFOKSB8fCAhaW5fYXJyYXkoJHByb2NTdGF0dXMsIFstMTA3Mzc0MDc5MSwgLTEwNzM3NDE4MTksIC0xMDczNzQwOTQwXSkpKSB7CiAgICAgICAgICAgICAgICAkZXhpdCA9ICRwcm9jU3RhdHVzOwogICAgICAgICAgICAgICAgZWNobyAiXDAzM1s0MW1LT1wwMzNbMG0gJGNvbXBvbmVudFxuXG4iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZWNobyAiXDAzM1szMm1PS1wwMzNbMG0gJGNvbXBvbmVudFxuXG4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9IGVsc2VpZiAoIWlzc2V0KCRhcmd2WzFdKSB8fCAnaW5zdGFsbCcgIT09ICRhcmd2WzFdIHx8IGZpbGVfZXhpc3RzKCdpbnN0YWxsJykpIHsKICAgIGlmICghY2xhc3NfZXhpc3RzKFxTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0OjpjbGFzcywgZmFsc2UpKSB7CiAgICAgICAgY2xhc3MgU3ltZm9ueUV4Y2x1ZGVMaXN0U2ltcGxlUGhwdW5pdAogICAgICAgIHsKICAgICAgICB9CiAgICB9CiAgICBhcnJheV9zcGxpY2UoJGFyZ3YsIDEsIDAsIFsnLS1jb2xvcnM9YWx3YXlzJ10pOwogICAgJF9TRVJWRVJbJ2FyZ3YnXSA9ICRhcmd2OwogICAgJF9TRVJWRVJbJ2FyZ2MnXSA9ICsrJGFyZ2M7CiAgICBpbmNsdWRlICIkUEhQVU5JVF9ESVIvJFBIUFVOSVRfVkVSU0lPTl9ESVIvcGhwdW5pdCI7Cn0KCmV4aXQoJGV4aXQpOwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czozMjoiXFN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MzI6IlxTeW1mb255RXhjbHVkZUxpc3RTaW1wbGVQaHB1bml0IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MzE6IlN5bWZvbnlFeGNsdWRlTGlzdFNpbXBsZVBocHVuaXQiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AaW1wbGVtZW50cyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGNvbnN0YW50cyI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHByb3BlcnRpZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AdXNlZFRyYWl0cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MzQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MzY7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";